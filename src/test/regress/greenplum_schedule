# Greenplum-specific tests
#
# The order of the tests is fairly random, but there are a couple of things
# to consider when placing a new test:
#
# * Keep long-running tests in the same group with other tests with a similar
#   runtime. That way, on a multi-processor system, the tests will finish
#   roughly at the same time, which maximizes parallelism.
# * Keep tests together with other tests for similar functionality.
# * There are some dependencies between tests, and some tests cannot run
#   in parallel with other tests.
# * The maximum size of a group is about 20, like in the Postgres
#   parallel_schedule. However, some queries can dispatch a lot of workers
#   to the segments, and therefore has to run in smaller groups to avoid
#   hitting max_connections limit on segments.
#

# gp_toolkit performs a vacuum and checks that it truncated the relation. That
# might not happen if other backends are holding transactions open, preventing
# vacuum from removing dead tuples. And run gp_toolkit early to make some log
# file related tests (like gp_log_system, etc) faster.
test: disable_autovacuum
test: gp_toolkit
test: python_processed64bit
test: enable_autovacuum

# enable query metrics cluster GUC
test: instr_in_shmem_setup
# run separately - because slot counter may influenced by other parallel queries
test: instr_in_shmem

test: createdb
test: enable_autovacuum

test: ao_checksum_corruption AOCO_Compression AORO_Compression table_statistics
test: session_reset
# below test(s) inject faults so each of them need to be in a separate group
test: fts_error

test: psql_gp_commands pg_resetwal dropdb_check_shared_buffer_cache gp_upgrade_cornercases

test: temp_relation
test: alter_db_set_tablespace

# This cannot run in parallel because other tests could increment the Oid
# counters and make the Oid counter observations hardcoded in the answer file
# incorrect.
test: oid_wraparound

# fts_recovery_in_progresss uses fault injectors to simulate FTS fault states,
# hence it should be run in isolation.
test: fts_recovery_in_progress
test: mirror_replay
test: autovacuum
test: autovacuum-segment
test: autovacuum-template0-segment

